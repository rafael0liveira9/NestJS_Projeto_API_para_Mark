generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cards {
  id          Int        @id @default(autoincrement())
  nameCard    String
  type        String
  description String
  publishedAt DateTime?
  steps       Json
  typeCard    Int
  whoDoing    Int?
  clientId    Int
  dueDate     DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?
  companiesId Int?
  Companies   Companies? @relation(fields: [companiesId], references: [id])
  Tables      Tables     @relation(fields: [typeCard], references: [id], onDelete: Cascade)
  Employee    Employee?  @relation(fields: [whoDoing], references: [id], onDelete: Cascade)
}

model Client {
  id               Int                @id @default(autoincrement())
  name             String
  document         String
  documentType     String
  phone            String
  cep              String
  costumerId       String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?
  userId           Int                @unique
  defaulter        Boolean?           @default(false)
  companiesId      Int?
  Companie         Companies?         @relation("companie", fields: [companiesId], references: [id])
  User             User               @relation(fields: [userId], references: [id])
  Companies        Companies[]        @relation("owner")
  Payments         Payments[]
  PaymentsServices PaymentsServices[]
  SocialFeedShow   SocialFeedShow[]
}

model Companies {
  id               Int                @id @default(autoincrement())
  companyName      String
  document         String             @unique
  documentType     String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?
  ownerId          Int?
  Cards            Cards[]
  Client           Client[]           @relation("companie")
  Owner            Client?            @relation("owner", fields: [ownerId], references: [id])
  ContratedService ContratedService[]
  Payments         Payments[]
  PaymentsServices PaymentsServices[]
  Archives         Archives[]
}

model ContratedService {
  id                   Int                    @id @default(autoincrement())
  companiesId          Int                    @unique
  Companies            Companies              @relation(fields: [companiesId], references: [id])
  LogoContratedItems   LogoContratedItems[]
  SiteContratedItems   SiteContratedItems[]
  SocialContratedItems SocialContratedItems[]
}

model Employee {
  id           Int       @id @default(autoincrement())
  name         String
  documentType String
  document     String
  phone        String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  userId       Int?
  Cards        Cards[]
  User         User?     @relation(fields: [userId], references: [id])
}

model Errors {
  id        Int       @id @default(autoincrement())
  errorCode Int
  message   String
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  User      User      @relation(fields: [userId], references: [id])
}

model Images {
  id                 Int                  @id @default(autoincrement())
  url                String
  title              String
  author             String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?
  LogoArchives       LogoArchives[]
  SiteProof          LogoProof[]
  SiteProofMockups   LogoProofMockups[]
  SiteLayoutFinished SiteLayoutFinished[]
  SiteLayoutSelected SiteLayoutSelected[]
  SiteLayoutsBase    SiteLayoutsBase[]
  SocialFeedShow     SocialFeedShow[]
}

model Lead {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  phone       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  subscribeAt DateTime?
}

model LogoBriefing {
  id             Int                 @id @default(autoincrement())
  format         FormatStyles
  cores          Json
  typography     String?
  especification EspecificationTypes
  description    String?
  references     String?
  titlefirst     String?
  titlesecond    String?
  LogoService    LogoService[]
}

model LogoContratedItems {
  id                 Int              @id @default(autoincrement())
  contratedServiceId Int
  logoServiceId      Int
  ContratedService   ContratedService @relation(fields: [contratedServiceId], references: [id])
  LogoService        LogoService      @relation(fields: [logoServiceId], references: [id])
}

model LogoService {
  id                 Int                  @id @default(autoincrement())
  status             Int                  @default(1)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?
  dueDate            DateTime?
  serviceTypeId      Int?                 @default(3)
  logoBriefingId     Int?
  logoProofId        Int?
  feedbackSended     Boolean?             @default(false)
  logoFeedbackId     Int?
  LogoArchives       LogoArchives[]
  LogoContratedItems LogoContratedItems[]
  LogoBriefing       LogoBriefing?        @relation(fields: [logoBriefingId], references: [id])
  LogoFeedback       LogoFeedback?        @relation(fields: [logoFeedbackId], references: [id])
  LogoProof          LogoProof?           @relation(fields: [logoProofId], references: [id])
  ServiceType        ServiceType?         @relation(fields: [serviceTypeId], references: [id])
}

model LogoFeedback {
  id          Int           @id @default(autoincrement())
  stars       Float
  comments    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  LogoService LogoService[]
}

model LogoArchives {
  id            Int          @id @default(autoincrement())
  name          String
  type          String
  url           String
  previewId     Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?
  logoServiceId Int?
  LogoService   LogoService? @relation(fields: [logoServiceId], references: [id])
  preview       Images       @relation(fields: [previewId], references: [id])
}

model LogoProof {
  id           Int                @id @default(autoincrement())
  isApproved   Boolean?
  reasonRefuse String?
  imagesId     Int
  userSended   Boolean?
  proofImage   Images             @relation(fields: [imagesId], references: [id])
  Mockups      LogoProofMockups[]
  LogoService  LogoService[]
}

model LogoProofMockups {
  id          Int        @id @default(autoincrement())
  imagesId    Int
  logoProofId Int?
  image       Images     @relation(fields: [imagesId], references: [id])
  LogoProof   LogoProof? @relation(fields: [logoProofId], references: [id])
  createdAt   DateTime   @default(now())
  deleteAt    DateTime?
}

model Packages {
  id               Int                @id @default(autoincrement())
  name             String
  price            Float
  description      String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?
  dueDate          DateTime?
  deletedAt        DateTime?
  PackagesServices PackagesServices[]
  PaymentsServices PaymentsServices[]
}

model PackagesServices {
  id        Int      @id @default(autoincrement())
  packageId Int
  serviceId Int
  Packages  Packages @relation(fields: [packageId], references: [id])
  Service   Service  @relation(fields: [serviceId], references: [id])
}

model Payments {
  id                    Int                     @id @default(autoincrement())
  uuid                  String                  @unique
  clientId              Int
  companiesId           Int
  value                 Float
  discount              Float?
  subscription          Boolean?                @default(false)
  voucherId             Int?
  status                PaymentStatus
  logGateway            Json
  createdAt             DateTime                @default(now())
  updatedAt             DateTime?
  Client                Client                  @relation(fields: [clientId], references: [id])
  Companies             Companies               @relation(fields: [companiesId], references: [id])
  PaymentsServices      PaymentsServices[]
  PaymentsSubscriptions PaymentsSubscriptions[]
}

model PaymentsSubscriptions {
  id           Int       @id @default(autoincrement())
  paymentsUuid String
  status       Int       @default(1)
  dueDate      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  payment      Payments  @relation(fields: [paymentsUuid], references: [uuid])
}

model PaymentsServices {
  id          Int       @id @default(autoincrement())
  paymentsId  Int
  serviceId   Int?
  clientId    Int
  companiesId Int
  createdAt   DateTime  @default(now())
  packagesId  Int?
  Client      Client    @relation(fields: [clientId], references: [id])
  Companies   Companies @relation(fields: [companiesId], references: [id])
  Package     Packages? @relation(fields: [packagesId], references: [id])
  Payment     Payments  @relation(fields: [paymentsId], references: [id])
  Service     Service?  @relation(fields: [serviceId], references: [id])
}

model RoleType {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model Service {
  id               Int                @id @default(autoincrement())
  name             String
  price            Float
  description      String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?
  serviceTypeId    Int
  deletedAt        DateTime?
  PackagesServices PackagesServices[]
  PaymentsServices PaymentsServices[]
  ServiceType      ServiceType        @relation(fields: [serviceTypeId], references: [id])
  modelServiceId   Int?
  modelService     ServiceTypeChoose? @relation(fields: [modelServiceId], references: [id])
  networkType      ServiceNetworks[]
  ServicePosts     ServicePosts[]
}

model ServiceNetworks {
  id                   Int                @id @default(autoincrement())
  serviceId            Int
  serviceNetworkTypeId Int
  service              Service            @relation(fields: [serviceId], references: [id])
  networkType          ServiceNetworkType @relation(fields: [serviceNetworkTypeId], references: [id])
}

model ServicePosts {
  id                 Int              @id @default(autoincrement())
  serviceId          Int
  service            Service          @relation(fields: [serviceId], references: [id])
  postType           ServicePostsType @relation(fields: [servicePostsTypeId], references: [id])
  servicePostsTypeId Int
}

model ServiceNetworkType {
  id              Int               @id @default(autoincrement())
  name            String
  createdAt       DateTime          @default(now())
  ServiceNetworks ServiceNetworks[]
}

model ServicePostsType {
  id           Int            @id @default(autoincrement())
  name         String
  createdAt    DateTime       @default(now())
  ServicePosts ServicePosts[]
}

model ServiceType {
  id                Int                 @id @default(autoincrement())
  name              String
  LogoService       LogoService[]
  Service           Service[]
  SiteService       SiteService[]
  SocialService     SocialService[]
  createdAt         DateTime            @default(now())
  serviceTypeChoose ServiceTypeChoose[]
}

model ServiceTypeChoose {
  id            Int          @id @default(autoincrement())
  name          String
  createdAt     DateTime     @default(now())
  Service       Service[]
  serviceTypeId Int?
  ServiceType   ServiceType? @relation(fields: [serviceTypeId], references: [id])
}

model SiteBriefing {
  id          Int           @id @default(autoincrement())
  host        String?
  hostLogin   String?
  hostPass    String?
  url         String?
  urlName     String?
  urlLogin    String?
  urlPass     String?
  colors      Json?
  references  Json?
  logo        String?
  contactData String?
  socialMidia String?
  SiteService SiteService[]
  briefingId  Int?
  archives    Archives[]    @relation("archives")
  briefing    Archives?     @relation("briefing", fields: [briefingId], references: [id])
}

model SiteContratedItems {
  id                 Int              @id @default(autoincrement())
  contratedServiceId Int
  siteServiceId      Int
  ContratedService   ContratedService @relation(fields: [contratedServiceId], references: [id])
  SiteService        SiteService      @relation(fields: [siteServiceId], references: [id])
}

model SiteService {
  id                   Int                  @id @default(autoincrement())
  status               Int                  @default(1)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime?
  dueDate              DateTime?
  serviceTypeId        Int?                 @default(1)
  siteBriefingId       Int?
  siteLayoutFinishedId Int?
  siteLayoutSelectedId Int?
  isPublished          Boolean?
  SiteContratedItems   SiteContratedItems[]
  SiteLayoutBase       SiteLayoutsBase[]
  ServiceType          ServiceType?         @relation(fields: [serviceTypeId], references: [id])
  SiteBriefing         SiteBriefing?        @relation(fields: [siteBriefingId], references: [id])
  SiteLayoutFinished   SiteLayoutFinished?  @relation(fields: [siteLayoutFinishedId], references: [id])
  SiteLayoutSelected   SiteLayoutSelected?  @relation(fields: [siteLayoutSelectedId], references: [id])
}

model SiteLayoutsBase {
  id            Int          @id @default(autoincrement())
  name          String
  layoutId      Int
  siteServiceId Int?
  Layout        Images       @relation(fields: [layoutId], references: [id])
  SiteService   SiteService? @relation(fields: [siteServiceId], references: [id])
}

model SiteLayoutSelected {
  id             Int           @id @default(autoincrement())
  layoutId       Int?
  LayoutSelected Images?       @relation(fields: [layoutId], references: [id])
  SiteService    SiteService[]
}

model SiteLayoutFinished {
  id            Int           @id @default(autoincrement())
  isApproved    Boolean?
  layoutId      Int?
  refuseReason  String?
  LayoutFinshed Images?       @relation(fields: [layoutId], references: [id])
  SiteService   SiteService[]
}

model SocialBriefing {
  id                   Int                   @id @default(autoincrement())
  socialProductImages  SocialProductImages[]
  socilaProductText    String?
  socialTalk           String?
  socialMediaReference Json?
  mediaType            SocialMediaType?
  timesPerWeek         SocialBriefingTimes[]
  daysHours            String
  SocialService        SocialService[]
}

enum SocialMediaType {
  ELEMENT
  PHOTO
  ALL
}

model SocialBriefingTimes {
  id               Int             @id @default(autoincrement())
  weekDay          String
  createdAt        DateTime        @default(now())
  socialBriefingId Int?
  SocialBriefing   SocialBriefing? @relation(fields: [socialBriefingId], references: [id])
}

model SocialProductImages {
  id               Int             @id @default(autoincrement())
  url              String
  createdAt        DateTime        @default(now())
  SocialBriefing   SocialBriefing? @relation(fields: [socialBriefingId], references: [id])
  socialBriefingId Int?
}

model SocialContratedItems {
  id                 Int              @id @default(autoincrement())
  contratedServiceId Int
  socialServiceId    Int
  ContratedService   ContratedService @relation(fields: [contratedServiceId], references: [id])
  SocialService      SocialService    @relation(fields: [socialServiceId], references: [id])
}

model SocialService {
  id                   Int                    @id @default(autoincrement())
  status               Int                    @default(1)
  actualMonth          Int                    @default(1)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime?
  dueDate              DateTime?
  serviceTypeId        Int?                   @default(2)
  socialBriefingId     Int?
  socialShowId         Int?
  SocialContratedItems SocialContratedItems[]
  ServiceType          ServiceType?           @relation(fields: [serviceTypeId], references: [id])
  SocialBriefing       SocialBriefing?        @relation(fields: [socialBriefingId], references: [id])
  SocialShow           SocialShow?            @relation(fields: [socialShowId], references: [id])
}

model SocialShow {
  id               Int              @id @default(autoincrement())
  allApproved      Boolean?
  comments         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?
  isRefused        Boolean          @default(false)
  isSendedByClient Boolean?
  feed             SocialFeedShow[]
  SocialService    SocialService[]
}

model SocialFeedShow {
  id           Int                @id @default(autoincrement())
  text         String
  type         SocialFeedShowType
  approved     Boolean?
  reasonRefuse String?
  comments     String?
  socialShowId Int?
  imagesId     Int?
  Images       Images?            @relation(fields: [imagesId], references: [id])
  SocialShow   SocialShow?        @relation(fields: [socialShowId], references: [id])
  clientId     Int?
  editBy       Client?            @relation(fields: [clientId], references: [id])
}

model Tables {
  id        Int       @id @default(autoincrement())
  tabName   String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  Cards     Cards[]
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  password      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  notification  Boolean    @default(true)
  firebaseToken String
  roleTypeId    Int        @default(1)
  Client        Client?
  Employee      Employee[]
  Errors        Errors[]
  RoleType      RoleType   @relation(fields: [roleTypeId], references: [id])
}

model Archives {
  id             Int            @id @default(autoincrement())
  url            String
  companiesId    Int
  companie       Companies      @relation(fields: [companiesId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?
  siteBriefingId Int?
  briefing       SiteBriefing?  @relation(name: "archives", fields: [siteBriefingId], references: [id])
  SiteBriefing   SiteBriefing[] @relation(name: "briefing")
}

enum EspecificationTypes {
  EMPRESA
  PRODUTO
  SERVICO
}

enum FormatStyles {
  QUADRADA
  REDONDA
  RETANGULAR_HORIZONTAL
  RETANGULAR_VERTICAL
  NONE
}

enum MediaFormat {
  FEED
  STORIES
  REELS
}

enum NetworkTypes {
  FACEBOOK
  INSTAGRAM
  TIKTOK
  YOUTUBE
  LINKEDIN
}

enum PaymentStatus {
  WAITING
  FINISHED_PAYMENT
  SENDED_TO_ASANA
}

enum SiteModels {
  ONEPAGE
  MULTIPAGE
  LANDPAGE
  MOBILEFIRST
  NONE
}

enum SocialImageBase {
  BANCO
  CLIENTE
  AMBAS
}

enum SocialMaterialQuant {
  DIARIO
  SEMANAL
  MENSAL
}

enum SocialServiceTypes {
  PLANEJAMENTO_GERAL
  PLANEJAMENTO_REDACIONAL
  PLANEJAMENTO_VISUAL
  PLANEJAMENTO_POSTAGENS
  PLANEJAMENTO_GESTAO
}

enum SocialFeedShowType {
  VIDEO
  IMAGE
  ARRAY_IMAGE
}
